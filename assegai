#!/bin/bash

assegai_path=$(which assegai)
assegai_path=${assegai_path:0:-7}
working_dir="$(pwd)/"

# Template paths
config_template="assegai.template"
config_project_template="assegai.project.template"
log_dir="/tmp/assegai-"
controller_template="${assegai_path}templates/Controller.Template.php"
entity_template="${assegai_path}templates/Entity.Template.php"
module_template="${assegai_path}templates/Module.Template.php"
service_template="${assegai_path}templates/Service.Template.php"
repository_template="${assegai_path}templates/Repository.Template.php"

# Scripts path
src_dir="${assegai_path}src/"

version="1.0.0"
config="${working_dir}assegai.json"
output="_assegai.json"
is_numeric="^[0-9]+$"
is_string="^\"*[0-9a-zA-Z\s]+\"*$"

declare -a schematics=("controller" "entity" "feature" "module" "service")
declare -a database_commands=("migration" "setup" "schema:sync")

# Utility Functions
ArrayContains () {
    local seeking=$1; shift
    local in=1
    for element; do
        if [[ $element == "$seeking" ]]; then
            in=0
            break
        fi
    done
    return $in
}

Log () {
    dir="$log_dir$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')"
    echo "Logging to $dir"
}

LogAction () {
  case $1 in
    create)
    prefix="\e[1;32mCREATE\e[0m "
    ;;

    delete)
    prefix="\e[1;31mDELETE\e[0m "
    ;;

    info)
    prefix="\e[1;33mINFO\e[0m "
    ;;

    update)
    prefix="\e[1;34mUPDATE\e[0m "
    ;;

    *)
    echo -e "\e[1;31mInvalid log action: $1"
    return 1
    ;;
  esac

  echo -e "${prefix}${2}"
}

Error () {
    echo -e "\e[1;31m$1\e[0m"
    exit
}

CheckWorkspace () {
    if test ! -f "$config"; then
        Error "The $1 command requires to be run in an Assegai project, but a project definition could not be found."
    fi
}

GetBytes () {
    stat --printf="%s" $1
}

UpdateModule() {
  script="${assegai_path}src/update-module.php"
  php $script ${@}
}

UpdateRoutes() {
  script="${assegai_path}src/update-routes.php"
  php $script ${@}
}

Header () {
  echo -e "\e[0;31m"
  echo '                                    _     _____ _      _____ '
  echo '     /\                            (_)   / ____| |    |_   _|'
  echo '    /  \   ___ ___  ___  __ _  __ _ _   | |    | |      | |  '
  echo '   / /\ \ / __/ __|/ _ \/ _` |/ _` | |  | |    | |      | |  '
  echo '  / ____ \\__ \__ \  __/ (_| | (_| | |  | |____| |____ _| |_ '
  echo ' /_/    \_\___/___/\___|\__, |\__,_|_|   \_____|______|_____|'
  echo '                         __/ |                               '
  echo '                        |___/                                '

  echo -e "\e[0;0m"
  echo ""
}

# Command Functions
Config () {
  CheckWorkspace "config"

  if test $2; then
    if [[ $2 =~ $is_numeric ]] ; then
      cat $config | jq ".$1 = $2" > $output
    else
      cat $config | jq ".$1 = \"$2\"" > $output
    fi
    mv $output $config
  elif test $1; then
    property=$(cat $config | jq ".$1")
    if [[ $property =~ $is_string ]] ; then
      echo $property | sed -r 's/["]+//g'
    else
      echo $property | jq
    fi
  else
    cat $config | jq
  fi
}

Migration () {
  php "${src_dir}migration.php" ${@}
}

Help () {
  case $1 in
    config)
      echo "Retrieves or sets Assegai configuration values in the assegai.json file for the workspace."
      echo "usage: assegai config <jsonPath> <value> [options]"

      echo -e "\narguments:"
      echo -e "  \e[1;34mjsonPath\e[0m"
      echo -e "    The configuration key to set or query, in JSON path format. For example: \"a[3].foo.bar[2]\". If no new value is provided, returns the current value of this key."
      echo -e "  \e[1;34mvalue\e[0m"
      echo -e "    If provided, a new value for the given configuration key."

      echo -e "\noptions:"
      echo -e "  \e[1;34m--global\e[0m (-g)"
      echo -e "    Access the global configuration in the caller's home directory."
      echo -e "  \e[1;34m--help\e[0m"
      echo -e "    Shows a help message for this command in the console."
    ;;

    generate)
      echo "Generates and/or modifies files based on a schematic."
      echo "usage: assegai generate <schematic> [options]"

      echo -e "\narguments:\n  \e[1;34mschematic\e[0m"
      echo -e "    The schematic or collection:schematic to generate."

      echo -e "\noptions:"
      echo -e "  \e[1;34m--defaults\e[0m"
      echo -e "    Disable interactive input prompts for options with a default."
      echo -e "  \e[1;34m--dry-run\e[0m (-d)"
      echo -e "     Run through and reports activity without writing out results."
      echo -e "  \e[1;34m--force\e[0m (-f)"
      echo -e "     Force overwriting of existing files."
      echo -e "  \e[1;34m--help\e[0m"
      echo -e "     Shows a help message for this command in the console."
      echo -e "  \e[1;34m--interactive\e[0m"
      echo -e "      Enable interactive input prompts."

      echo -e "\nAvailable Schematics:"
      for s in "${schematics[@]}"
      do
        echo -e "  $s"
      done
      echo ""
    ;;

    *)
      Header
      echo "Available Commands:"
      echo -e "  \e[1;34mconfig \e[0;0m\tRetrieves or sets Assegai configuration values in the assegai.json file for the workspace."
      echo -e "  \e[1;34mdatabase \e[0;0m(d)\tGenerates and/or modifies files based on a schematic."
      echo -e "  \e[1;34mgenerate \e[0;0m(g)\tGenerates and/or modifies files based on a schematic."
      echo -e "  \e[1;34minit \e[0;0m\t\tCreate an empty Assegai workspace or reinitialize an existing one"
      echo -e "  \e[1;34mnew \e[0;0m\t\tGenerate Assegai application."
      echo -e "  \e[1;34mversion \e[0;0m(v)\tOutputs Assegai CLI version."
      echo -e "\nFor more detailed help run \"assegai help [command name]\""
    ;;
  esac
}

Init () {
  if test ! -f $config; then
    is_new=1
  else
    is_new=0
    # rm $config
  fi

  cp "${assegai_path}${config_template}" $config

  if test -f $config; then
    size=$(GetBytes $config)
    echo -e "\e[1;32mCreate\e[0m $config ($size bytes)\n"
  fi

  read -p $'\e[1;32m?\e[0m Project name: ' project_name
  read -p $'\e[1;32m?\e[0m Version [1.0.0]: ' project_version
  project_version=${project_version:-"1.0.0"}
  read -p $'\e[1;32m?\e[0m Description: ' project_description

  Config "name" $project_name
  Config "version" $project_version
  Config "description" $project_description

  if test $is_new -eq 1; then
    echo -e "\nInitialized empty Assegai workspace in $working_dir"
  else
    echo -e "\nReinitialized existing Assegai workspace in $working_dir"
  fi
  exit
}

NewApplicationHelp () {
  declare -A available_options=(["-d"]="--directory" ["-h"]="--help")
  declare -A descriptions=(["--directory"]="Specify the destination directory." ["--help"]="Output usage information.")
  echo -e "Usage: assegai new|n [options] [name]"
  echo -e "\nGenerate Nest application"
  echo -e "\nOptions:"
  for alias in "${!available_options[@]}"
  do
    option_name=${available_options[$alias]}
    if test $alias = "-d"; then
      echo -e "  ${option_name} [directory]\t\t\t${descriptions[$option_name]}"
    else
      echo -e "  ${alias}, ${available_options[$alias]}\t\t\t\t\t${descriptions[$option_name]}"
    fi
  done
  exit
}

NewApplication () {
  git_source="https://github.com/amasiye/assegai-php.git"
  case $1 in
    --help)
    NewApplicationHelp
    ;;

    -h)
    NewApplicationHelp
    ;;

    *)
    if test -z $1; then
      NewApplicationHelp
    else
      project_name=$1
      echo -e "âš¡  We will scaffold your app in a few seconds..."

      if test ! -d $project_name; then
        mkdir $project_name
        
        if test ! -d $project_name; then
          echo -e "\e[1;31mCouldn't not create project directory: ${project_name}\e[0m"
          exit
        fi
        LogAction "create" "${project_name}"
      fi



    fi
    ;;
  esac
}

case $1 in
  config)
    php "${src_dir}config.php" ${@}
  ;;

  database)
    php "${src_dir}database.php" ${@:2}
  ;;

  d)
    php "${src_dir}database.php" ${@:2}
  ;;

  generate)
    php "${src_dir}generate.php" ${@:2}
  ;;

  g)
    php "${src_dir}generate.php" ${@:2}
  ;;

  migration)
    php "${src_dir}migration.php" ${@:2}
  ;;

  init)
    php "${src_dir}init.php" ${@:2}
  ;;

  lint)
    php "${src_dir}lint.php" ${@:2}
  ;;

  n)
    php "${src_dir}new.php" ${@:2}
  ;;

  new)
    php "${src_dir}new.php" ${@:2}
  ;;

  test)
    php "${src_dir}test.php" ${@:2}
  ;;

  version)
    php "${src_dir}version.php" ${@:2}
  ;;

  v)
    php "${src_dir}version.php" ${@:2}
  ;;

  info)
    php "${src_dir}info.php" ${@:2}
  ;;

  *)
    php "${src_dir}help.php" ${@:2}
    # Help $2
  ;;
esac